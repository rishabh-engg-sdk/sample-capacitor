{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAEA,MAAM,CAAN,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,qCAAG,CAAA;IACH,+CAAQ,CAAA;IACR,+CAAQ,CAAA;IACR,+CAAQ,CAAA;AAEV,CAAC,EANW,QAAQ,KAAR,QAAQ,QAMnB","sourcesContent":["import type {PluginListenerHandle} from \"@capacitor/core\";\n\nexport enum Operator {\n  ADD,\n  SUBTRACT,\n  MULTIPLY,\n  DIVISION\n\n}\n\nexport interface ActivityData {\n  activityName: string\n}\n\nexport interface CalculateEventData {\n  calculateData: CalculateData,\n  result: number\n}\n\nexport interface CalculateData {\n  operator: Operator,\n  operand: { a: number, b: number }\n}\n\nexport type OnActivityEventCallback = (event: ActivityData) => void\nexport type OnCalculateEventCallback = (calculateEventData: CalculateEventData) => void\n\nexport interface ActivityPlugin {\n\n  /**\n   * Register for activity lifecycle callback.\n   */\n  registerForActivityCallbacks(): Promise<void>\n\n  addListener(\n    event: 'onActivityCreated',\n    listenerFunc: OnActivityEventCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle\n\n  addListener(\n    event: 'onActivityStarted',\n    listenerFunc: OnActivityEventCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle\n\n  addListener(\n    event: 'onActivityResumed',\n    listenerFunc: OnActivityEventCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle\n\n  addListener(\n    event: 'onActivityPaused',\n    listenerFunc: OnActivityEventCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle\n\n  addListener(\n    event: 'onActivityStopped',\n    listenerFunc: OnActivityEventCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle\n\n  addListener(\n    event: 'onActivitySaveInstanceState',\n    listenerFunc: OnActivityEventCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle\n\n  addListener(\n    event: 'onActivityDestroyed',\n    listenerFunc: OnActivityEventCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle\n}\n\nexport interface CalculatePlugin {\n\n  calculate(calculateData: CalculateData): Promise<void>\n\n  addListener(\n    event: 'onCalculate',\n    listenerFunc: OnCalculateEventCallback\n  ): Promise<PluginListenerHandle> & PluginListenerHandle\n}\n"]}